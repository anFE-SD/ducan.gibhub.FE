		# H∆∞·ªõng D·∫´n Hi·ªÉu Code Selenium Testing - T·ª´ C∆° B·∫£n ƒê·∫øn N√¢ng Cao
		
		## üìö M·ª•c L·ª•c
		1. [T·ªïng Quan V·ªÅ Selenium](#tong-quan)
		2. [C·∫•u Tr√∫c Project](#cau-truc)
		3. [C√°c Th√†nh Ph·∫ßn Ch√≠nh](#thanh-phan)
		4. [Ph√¢n T√≠ch Chi Ti·∫øt Code](#phan-tich)
		5. [C√°c Kh√°i Ni·ªám Quan Tr·ªçng](#khai-niem)
		6. [C√°ch Ch·∫°y v√† S·ª≠ D·ª•ng](#cach-chay)
		7. [Troubleshooting](#troubleshooting)
		
		---
		
		## üéØ 1. T·ªïng Quan V·ªÅ Selenium {#tong-quan}
		
		### Selenium l√† g√¨?
		- **Selenium WebDriver** l√† c√¥ng c·ª• t·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát web
		- Cho ph√©p vi·∫øt code ƒë·ªÉ ƒëi·ªÅu khi·ªÉn tr√¨nh duy·ªát nh∆∞ ng∆∞·ªùi d√πng th·∫≠t
		- ƒê∆∞·ª£c s·ª≠ d·ª•ng ch·ªß y·∫øu cho **ki·ªÉm th·ª≠ t·ª± ƒë·ªông** (automated testing)
		
		### T·∫°i sao s·ª≠ d·ª•ng Selenium?
		- ‚úÖ Ki·ªÉm th·ª≠ kh√¥ng c·∫ßn thao t√°c th·ªß c√¥ng
		- ‚úÖ C√≥ th·ªÉ ch·∫°y tr√™n nhi·ªÅu tr√¨nh duy·ªát
		- ‚úÖ Ti·∫øt ki·ªám th·ªùi gian v√† c√¥ng s·ª©c
		- ‚úÖ ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
		
		---
		
		## üèóÔ∏è 2. C·∫•u Tr√∫c Project {#cau-truc}
		
		```
		D·ª± √°n c·ªßa b·∫°n/
		‚îú‚îÄ‚îÄ src/
		‚îÇ   ‚îî‚îÄ‚îÄ TestCase/
		‚îÇ       ‚îî‚îÄ‚îÄ KiemThuAuthControllerClass.java
		‚îú‚îÄ‚îÄ anh-chup-kiem-thu/          # Th∆∞ m·ª•c ·∫£nh ch·ª•p m√†n h√¨nh
		‚îú‚îÄ‚îÄ pom.xml                     # File c·∫•u h√¨nh Maven
		‚îî‚îÄ‚îÄ drivers/                    # ChromeDriver (t·ª± ƒë·ªông t·∫£i)
		```
		
		### Dependencies c·∫ßn thi·∫øt (pom.xml):
		```xml
		<dependencies>
		    <!-- Selenium WebDriver -->
		    <dependency>
		        <groupId>org.seleniumhq.selenium</groupId>
		        <artifactId>selenium-java</artifactId>
		        <version>4.15.0</version>
		    </dependency>
		    
		    <!-- JUnit 5 -->
		    <dependency>
		        <groupId>org.junit.jupiter</groupId>
		        <artifactId>junit-jupiter</artifactId>
		        <version>5.10.0</version>
		    </dependency>
		    
		    <!-- WebDriverManager -->
		    <dependency>
		        <groupId>io.github.bonigarcia</groupId>
		        <artifactId>webdrivermanager</artifactId>
		        <version>5.5.3</version>
		    </dependency>
		    
		    <!-- Apache Commons IO -->
		    <dependency>
		        <groupId>commons-io</groupId>
		        <artifactId>commons-io</artifactId>
		        <version>2.11.0</version>
		    </dependency>
		</dependencies>
		```
		
		---
		
		## üîß 3. C√°c Th√†nh Ph·∫ßn Ch√≠nh {#thanh-phan}
		
		### A. WebDriver
		```java
		private static WebDriver trieuDongWeb;
		```
		- **Ch·ª©c nƒÉng**: ƒêi·ªÅu khi·ªÉn tr√¨nh duy·ªát
		- **Gi·ªëng nh∆∞**: Tay c·ªßa b·∫°n khi thao t√°c tr√™n web
		- **C√≥ th·ªÉ l√†m**: Click, nh·∫≠p text, ƒëi·ªÅu h∆∞·ªõng trang
		
		### B. WebDriverWait
		```java
		private static WebDriverWait choDoiWeb;
		```
		- **Ch·ª©c nƒÉng**: Ch·ªù ƒë·ª£i ph·∫ßn t·ª≠ xu·∫•t hi·ªán
		- **T·∫°i sao c·∫ßn**: Web loading m·∫•t th·ªùi gian
		- **V√≠ d·ª•**: Ch·ªù n√∫t "ƒêƒÉng nh·∫≠p" xu·∫•t hi·ªán tr∆∞·ªõc khi click
		
		### C. Annotations JUnit
		```java
		@BeforeAll  // Ch·∫°y tr∆∞·ªõc t·∫•t c·∫£ test
		@AfterAll   // Ch·∫°y sau t·∫•t c·∫£ test
		@Test       // ƒê√°nh d·∫•u l√† test case
		@Order(1)   // Th·ª© t·ª± ch·∫°y test
		```
		
		---
		
		## üîç 4. Ph√¢n T√≠ch Chi Ti·∫øt Code {#phan-tich}
		
		### B∆∞·ªõc 1: Kh·ªüi T·∫°o (Setup)
		```java
		@BeforeAll
		static void caiDatBanDau() {
		    // 1. T·ª± ƒë·ªông t·∫£i ChromeDriver
		    WebDriverManager.chromedriver().setup();
		    
		    // 2. C·∫•u h√¨nh Chrome
		    ChromeOptions tuyChonChrome = new ChromeOptions();
		    tuyChonChrome.addArguments("--start-maximized");
		    
		    // 3. Kh·ªüi t·∫°o tr√¨nh duy·ªát
		    trieuDongWeb = new ChromeDriver(tuyChonChrome);
		    
		    // 4. C√†i ƒë·∫∑t th·ªùi gian ch·ªù
		    choDoiWeb = new WebDriverWait(trieuDongWeb, Duration.ofSeconds(10));
		}
		```
		
		**Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc:**
		1. **WebDriverManager**: T·ª± ƒë·ªông t·∫£i driver ph√π h·ª£p v·ªõi Chrome
		2. **ChromeOptions**: C·∫•u h√¨nh tr√¨nh duy·ªát (m·ªü to√†n m√†n h√¨nh)
		3. **ChromeDriver**: T·∫°o instance ƒë·ªÉ ƒëi·ªÅu khi·ªÉn Chrome
		4. **WebDriverWait**: Ch·ªù t·ªëi ƒëa 10 gi√¢y cho m·ªói thao t√°c
		
		### B∆∞·ªõc 2: T√¨m Ph·∫ßn T·ª≠ (Element Location)
		```java
		// C√°ch 1: T√¨m theo name attribute
		WebElement truongTenDangNhap = trieuDongWeb.findElement(By.name("username"));
		
		// C√°ch 2: T√¨m theo CSS selector
		WebElement nutDangNhap = trieuDongWeb.findElement(By.cssSelector("button[type='submit']"));
		
		// C√°ch 3: Ch·ªù ƒë·ª£i ph·∫ßn t·ª≠ xu·∫•t hi·ªán
		WebElement truongTenDangNhap = choDoiWeb.until(
		    ExpectedConditions.presenceOfElementLocated(By.name("username"))
		);
		```
		
		**C√°c c√°ch t√¨m ph·∫ßn t·ª≠ kh√°c:**
		- `By.id("myId")` - T√¨m theo ID
		- `By.className("myClass")` - T√¨m theo class
		- `By.linkText("ƒêƒÉng xu·∫•t")` - T√¨m theo text c·ªßa link
		- `By.xpath("//div[@class='error']")` - T√¨m theo XPath
		
		### B∆∞·ªõc 3: Thao T√°c V·ªõi Ph·∫ßn T·ª≠
		```java
		// Nh·∫≠p text
		truongTenDangNhap.sendKeys("levanan");
		
		// Click
		nutDangNhap.click();
		
		// Ki·ªÉm tra hi·ªÉn th·ªã
		boolean coHienThi = truongTenDangNhap.isDisplayed();
		
		// L·∫•y text
		String noiDung = thongBaoLoi.getText();
		```
		
		### B∆∞·ªõc 4: Ki·ªÉm Tra K·∫øt Qu·∫£ (Assertions)
		```java
		// Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√∫ng
		Assertions.assertTrue(
		    truongTenDangNhap.isDisplayed(), 
		    "Tr∆∞·ªùng t√™n ƒëƒÉng nh·∫≠p ph·∫£i hi·ªÉn th·ªã"
		);
		
		// Ki·ªÉm tra URL ch·ª©a t·ª´ kh√≥a
		Assertions.assertTrue(
		    duongDanHienTai.contains("dashboard"), 
		    "Ph·∫£i chuy·ªÉn h∆∞·ªõng ƒë·∫øn dashboard"
		);
		```
		
		---
		
		## üí° 5. C√°c Kh√°i Ni·ªám Quan Tr·ªçng {#khai-niem}
		
		### A. Test Case L√† G√¨?
		- **ƒê·ªãnh nghƒ©a**: M·ªôt k·ªãch b·∫£n ki·ªÉm th·ª≠ c·ª• th·ªÉ
		- **V√≠ d·ª•**: "Ki·ªÉm tra ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n h·ª£p l·ªá"
		- **C·∫•u tr√∫c**: Setup ‚Üí Thao t√°c ‚Üí Ki·ªÉm tra k·∫øt qu·∫£
		
		### B. Page Object Model (Kh√¥ng c√≥ trong code n√†y)
		```java
		// V√≠ d·ª• c√°ch t·ªï ch·ª©c t·ªët h∆°n:
		public class LoginPage {
		    private WebDriver driver;
		    
		    @FindBy(name = "username")
		    private WebElement usernameField;
		    
		    public void login(String username, String password) {
		        usernameField.sendKeys(username);
		        // ...
		    }
		}
		```
		
		### C. Explicit Wait vs Implicit Wait
		```java
		// Explicit Wait (ƒë∆∞·ª£c s·ª≠ d·ª•ng trong code)
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.presenceOfElementLocated(By.id("myId")));
		
		// Implicit Wait (kh√¥ng d√πng trong code n√†y)
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		```
		
		### D. Exception Handling
		```java
		try {
		    // Th·ª≠ t√¨m th√¥ng b√°o l·ªói
		    WebElement thongBaoLoi = choDoiWeb.until(ExpectedConditions.presenceOfElementLocated(...));
		} catch (TimeoutException e) {
		    // N·∫øu kh√¥ng t√¨m th·∫•y, l√†m c√°ch kh√°c
		    chupManHinh("khong_co_thong_bao_loi");
		}
		```
		
		---
		
		## üöÄ 6. C√°ch Ch·∫°y v√† S·ª≠ D·ª•ng {#cach-chay}
		
		### Y√™u C·∫ßu H·ªá Th·ªëng:
		- ‚úÖ Java 8 tr·ªü l√™n
		- ‚úÖ Maven ho·∫∑c Gradle
		- ‚úÖ Chrome browser
		- ‚úÖ IDE (IntelliJ IDEA, Eclipse, VS Code)
		
		### C√°ch Ch·∫°y:
		
		#### Ph∆∞∆°ng √°n 1: T·ª´ IDE
		1. M·ªü project trong IDE
		2. Right-click v√†o file test
		3. Ch·ªçn "Run KiemThuAuthControllerClass"
		
		#### Ph∆∞∆°ng √°n 2: T·ª´ Command Line
		```bash
		# Ch·∫°y t·∫•t c·∫£ test
		mvn test
		
		# Ch·∫°y test c·ª• th·ªÉ
		mvn test -Dtest=KiemThuAuthControllerClass
		
		# Ch·∫°y v·ªõi profile c·ª• th·ªÉ
		mvn test -Dtest=KiemThuAuthControllerClass#kiemThuDangNhap_ThongTinHopLe_ThanhCong
		```
		
		### K·∫øt Qu·∫£ Mong ƒê·ª£i:
		```
		=== KI·ªÇM TH·ª¨ 1: Hi·ªÉn Th·ªã Form ƒêƒÉng Nh·∫≠p ===
		‚úÖ Form ƒëƒÉng nh·∫≠p hi·ªÉn th·ªã th√†nh c√¥ng
		ƒê√£ l∆∞u ·∫£nh ch·ª•p m√†n h√¨nh: anh-chup-kiem-thu/01_form_dang_nhap_2024-01-15_14-30-25.png
		
		=== KI·ªÇM TH·ª¨ 2: ƒêƒÉng Nh·∫≠p H·ª£p L·ªá ===
		‚úÖ ƒêƒÉng nh·∫≠p h·ª£p l·ªá th√†nh c√¥ng, chuy·ªÉn h∆∞·ªõng ƒë·∫øn: http://localhost:8080/dashboard
		```
		
		---
		
		## üîß 7. Troubleshooting {#troubleshooting}
		
		### L·ªói Th∆∞·ªùng G·∫∑p:
		
		#### A. ChromeDriver Kh√¥ng T∆∞∆°ng Th√≠ch
		```
		Error: SessionNotCreatedException: session not created
		```
		**Gi·∫£i ph√°p:**
		```java
		// C·∫≠p nh·∫≠t WebDriverManager
		WebDriverManager.chromedriver().clearDriverCache().setup();
		```
		
		#### B. Element Kh√¥ng T√¨m Th·∫•y
		```
		Error: NoSuchElementException: no such element
		```
		**Gi·∫£i ph√°p:**
		```java
		// Th√™m wait
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15));
		WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.name("username")));
		```
		
		#### C. Trang Web Ch·∫≠m Load
		```
		Error: TimeoutException: Expected condition failed
		```
		**Gi·∫£i ph√°p:**
		```java
		// TƒÉng th·ªùi gian ch·ªù
		choDoiWeb = new WebDriverWait(trieuDongWeb, Duration.ofSeconds(30));
		
		// Ho·∫∑c ch·ªù trang load xong
		choDoiWeb.until(ExpectedConditions.jsReturnsValue("return document.readyState==='complete'"));
		```
		
		#### D. Headless Mode (Ch·∫°y Kh√¥ng Giao Di·ªán)
		```java
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--headless");
		options.addArguments("--no-sandbox");
		options.addArguments("--disable-dev-shm-usage");
		WebDriver driver = new ChromeDriver(options);
		```
		
		### Debug Tips:
		
		#### 1. Ch·ª•p M√†n H√¨nh Nhi·ªÅu H∆°n
		```java
		// Th√™m v√†o m·ªói b∆∞·ªõc quan tr·ªçng
		chupManHinh("buoc_" + System.currentTimeMillis());
		```
		
		#### 2. In Ra Console
		```java
		// Debug th√¥ng tin
		System.out.println("Current URL: " + driver.getCurrentUrl());
		System.out.println("Page title: " + driver.getTitle());
		System.out.println("Element text: " + element.getText());
		```
		
		#### 3. Ki·ªÉm Tra Page Source
		```java
		// Xem to√†n b·ªô HTML
		String pageSource = driver.getPageSource();
		System.out.println(pageSource);
		```
		
		---
		
		## üìã 8. Best Practices
		
		### A. T·ªï Ch·ª©c Code
		```java
		// ‚ùå Kh√¥ng t·ªët
		driver.findElement(By.name("username")).sendKeys("admin");
		driver.findElement(By.name("password")).sendKeys("123456");
		driver.findElement(By.cssSelector("button")).click();
		
		// ‚úÖ T·ªët h∆°n
		public void login(String username, String password) {
		    usernameField.sendKeys(username);
		    passwordField.sendKeys(password);
		    loginButton.click();
		}
		```
		
		### B. S·ª≠ D·ª•ng Constants
		```java
		// ‚úÖ T·ªët
		private static final String BASE_URL = "http://localhost:8080";
		private static final String SCREENSHOT_DIR = "screenshots";
		private static final Duration WAIT_TIMEOUT = Duration.ofSeconds(10);
		```
		
		### C. Data-Driven Testing
		```java
		// S·ª≠ d·ª•ng file CSV ho·∫∑c Excel
		@ParameterizedTest
		@CsvSource({
		    "validUser, validPass, true",
		    "invalidUser, invalidPass, false"
		})
		void testLogin(String username, String password, boolean shouldSucceed) {
		    // Test logic
		}
		```
		
		---
		
		## üéì 9. H·ªçc Th√™m
		
		### T√†i Li·ªáu Ch√≠nh Th·ª©c:
		- [Selenium Documentation](https://selenium-python.readthedocs.io/)
		- [JUnit 5 User Guide](https://junit.org/junit5/docs/current/user-guide/)
		
		### Video Tutorials:
		- "Selenium with Java" tr√™n YouTube
		- "Test Automation University" - Applitools
		
		### Practice Projects:
		1. Ki·ªÉm th·ª≠ trang ƒëƒÉng k√Ω
		2. Ki·ªÉm th·ª≠ gi·ªè h√†ng e-commerce
		3. Ki·ªÉm th·ª≠ form li√™n h·ªá
		
		### Advanced Topics:
		- Page Object Model
		- Data-Driven Testing
		- Parallel Execution
		- CI/CD Integration
		- Docker v·ªõi Selenium Grid
		
		---
		
		## üí≠ T√≥m T·∫Øt
		
		Code Selenium n√†y th·ª±c hi·ªán **10 test cases** ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng x√°c th·ª±c:
		
		1. **Test c∆° b·∫£n**: Hi·ªÉn th·ªã form, ƒëƒÉng nh·∫≠p/k√Ω th√†nh c√¥ng
		2. **Test bi√™n**: D·ªØ li·ªáu r·ªóng, tr√πng l·∫∑p, kh√¥ng h·ª£p l·ªá  
		3. **Test lu·ªìng**: ƒêƒÉng nh·∫≠p ‚Üí ƒêƒÉng xu·∫•t
		
		**∆Øu ƒëi·ªÉm c·ªßa code:**
		- ‚úÖ C√≥ ch·ª•p m√†n h√¨nh ƒë·ªÉ debug
		- ‚úÖ X·ª≠ l√Ω exception t·ªët
		- ‚úÖ Test cases ƒëa d·∫°ng
		- ‚úÖ S·ª≠ d·ª•ng WebDriverWait
		
		**C√≥ th·ªÉ c·∫£i thi·ªán:**
		- üìà S·ª≠ d·ª•ng Page Object Model
		- üìà T√°ch config ra file ri√™ng
		- üìà Th√™m parallel execution
		- üìà S·ª≠ d·ª•ng TestNG thay JUnit
		
		Hy v·ªçng t√†i li·ªáu n√†y gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ Selenium testing! üöÄ